/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.lokapi.api;

import be.lokapi.model.AuthTokenDTO;
import be.lokapi.model.AuthenticateUserRequestDTO;
import be.lokapi.model.RegisterUserRequestDTO;
import be.lokapi.model.UserDTO;
import be.lokapi.model.UserMessageResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-14T03:02:17.381251+01:00[Europe/Brussels]")
@Controller
@Tag(name = "auth", description = "Everything about your Authentifications")
public interface AuthApi {

    /**
     * GET /auth/activate : Activate a user registered
     *
     * @param token Token to activate the user  (required)
     * @return Authentication failed (status code 400)
     *         or Message User actived successfully (status code 200)
     */
    @Operation(
        operationId = "activateUser",
        summary = "Activate a user registered",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Authentication failed"),
            @ApiResponse(responseCode = "default", description = "Message User actived successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/activate",
        produces = { "application/json" }
    )
    ResponseEntity<String> activateUser(
        @Parameter(name = "token", description = "Token to activate the user ", required = true, in = ParameterIn.PATH) @PathVariable("token") String token
    );


    /**
     * POST /auth/login : Authenticate a user
     *
     * @param authenticateUserRequestDTO  (required)
     * @return Authentication failed (status code 400)
     *         or User authenticated successfully token returned (status code 200)
     */
    @Operation(
        operationId = "authenticateUser",
        summary = "Authenticate a user",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Authentication failed"),
            @ApiResponse(responseCode = "default", description = "User authenticated successfully token returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AuthTokenDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AuthTokenDTO> authenticateUser(
        @Parameter(name = "AuthenticateUserRequestDTO", description = "", required = true) @RequestBody AuthenticateUserRequestDTO authenticateUserRequestDTO
    );


    /**
     * GET /auth/infoUser/{id} : Getinf from user
     *
     * @param userId The id that needs to be fetched. Use user for testing.  (required)
     * @return Get info failed (status code 400)
     *         or User authenticated successfully returned (status code 200)
     */
    @Operation(
        operationId = "infoUser",
        summary = "Getinf from user",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Get info failed"),
            @ApiResponse(responseCode = "default", description = "User authenticated successfully returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/auth/infoUser/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<UserDTO> infoUser(
        @Parameter(name = "userId", description = "The id that needs to be fetched. Use user for testing. ", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
    );


    /**
     * POST /auth/register : Register a new user
     *
     * @param registerUserRequestDTO  (required)
     * @return Invalid input (status code 400)
     *         or User registered successfully (status code 200)
     */
    @Operation(
        operationId = "registerUser",
        summary = "Register a new user",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "default", description = "User registered successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserMessageResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserMessageResponseDTO> registerUser(
        @Parameter(name = "RegisterUserRequestDTO", description = "", required = true) @RequestBody RegisterUserRequestDTO registerUserRequestDTO
    );

}
