/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.lokapi.api;

import be.lokapi.model.DownloadFile400ResponseDTO;
import be.lokapi.model.UploadFile400ResponseDTO;
import be.lokapi.model.UploadFile415ResponseDTO;
import be.lokapi.model.UploadFile500ResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-14T03:02:17.381251+01:00[Europe/Brussels]")
@Controller
@Tag(name = "file", description = "Everything about your Authentifications")
public interface FileApi {

    /**
     * GET /file/download/{filename} : Download a file from the server
     *
     * @param filename File name (required)
     * @return File downloaded successfully (status code 200)
     *         or Invalid parameters or file not found (status code 400)
     */
    @Operation(
        operationId = "downloadFile",
        summary = "Download a file from the server",
        tags = { "file" },
        responses = {
            @ApiResponse(responseCode = "200", description = "File downloaded successfully", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid parameters or file not found", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = DownloadFile400ResponseDTO.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = DownloadFile400ResponseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/file/download/{filename}",
        produces = { "application/octet-stream", "application/json" }
    )
    ResponseEntity<org.springframework.core.io.Resource> downloadFile(
        @Parameter(name = "filename", description = "File name", required = true, in = ParameterIn.QUERY) @RequestParam(value = "filename", required = true) String filename
    );


    /**
     * GET /file/preview/{filename} : Preview a file directly without downloading it
     * Streams a file as a binary resource for preview.
     *
     * @param filename The name of the file to preview. (required)
     * @return The file was successfully streamed for preview. (status code 200)
     *         or File not found on the server. (status code 404)
     *         or Server error while processing the file. (status code 500)
     */
    @Operation(
        operationId = "previewFile",
        summary = "Preview a file directly without downloading it",
        description = "Streams a file as a binary resource for preview.",
        tags = { "File" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The file was successfully streamed for preview.", content = {
                @Content(mediaType = "application/octet-stream", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "404", description = "File not found on the server."),
            @ApiResponse(responseCode = "500", description = "Server error while processing the file.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/file/preview/{filename}",
        produces = { "application/octet-stream" }
    )
    ResponseEntity<org.springframework.core.io.Resource> previewFile(
        @Parameter(name = "filename", description = "The name of the file to preview.", required = true, in = ParameterIn.QUERY) @RequestParam(value = "filename", required = true) String filename
    );


    /**
     * POST /file/upload : Upload files from application
     *
     * @param owner L&#39;ID du propriétaire (owner) (required)
     * @param tenant L&#39;ID du locataire (tenant) (required)
     * @param property L&#39;adresse de la propriété (property) (required)
     * @param file Le fichier PDF à uploader. (required)
     * @return Aucun fichier sélectionné ou mauvaise requête (status code 400)
     *         or Mauvais type de fichier (status code 415)
     *         or Erreur interne du serveur (status code 500)
     *         or Fichier uploadé avec succès (status code 200)
     */
    @Operation(
        operationId = "uploadFile",
        summary = "Upload files from application",
        tags = { "file" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Aucun fichier sélectionné ou mauvaise requête", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UploadFile400ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "415", description = "Mauvais type de fichier", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UploadFile415ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Erreur interne du serveur", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UploadFile500ResponseDTO.class))
            }),
            @ApiResponse(responseCode = "default", description = "Fichier uploadé avec succès", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/file/upload",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    ResponseEntity<String> uploadFile(
        @Parameter(name = "owner", description = "L'ID du propriétaire (owner)", required = true, in = ParameterIn.QUERY) @RequestParam(value = "owner", required = true) String owner,
        @Parameter(name = "tenant", description = "L'ID du locataire (tenant)", required = true, in = ParameterIn.QUERY) @RequestParam(value = "tenant", required = true) String tenant,
        @Parameter(name = "property", description = "L'adresse de la propriété (property)", required = true, in = ParameterIn.QUERY) @RequestParam(value = "property", required = true) String property,
        @Parameter(name = "file", description = "Le fichier PDF à uploader.", required = true) @RequestPart(value = "file", required = true) MultipartFile file
    );

}
