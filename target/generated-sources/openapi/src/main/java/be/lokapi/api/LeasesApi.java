/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.lokapi.api;

import be.lokapi.model.LeaseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-14T03:02:17.381251+01:00[Europe/Brussels]")
@Controller
@Tag(name = "lease", description = "Operations about leasing")
public interface LeasesApi {

    /**
     * POST /leases : Create lease
     * This can only be done by the logged in user.
     *
     * @param leaseDTO Created lease object (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "createLease",
        summary = "Create lease",
        description = "This can only be done by the logged in user.",
        tags = { "lease" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LeaseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/leases",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<LeaseDTO> createLease(
        @Parameter(name = "LeaseDTO", description = "Created lease object") @RequestBody(required = false) LeaseDTO leaseDTO
    );


    /**
     * DELETE /leases : delete lease
     * Delete add a date in delete date
     *
     * @param leaseDTO  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "deleteLease",
        summary = "delete lease",
        description = "Delete add a date in delete date",
        tags = { "lease" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LeaseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/leases",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<LeaseDTO> deleteLease(
        @Parameter(name = "LeaseDTO", description = "") @RequestBody(required = false) LeaseDTO leaseDTO
    );


    /**
     * GET /leases : Get all leases
     *
     * @return List of leases (status code 200)
     */
    @Operation(
        operationId = "getAllLeases",
        summary = "Get all leases",
        tags = { "lease" },
        responses = {
            @ApiResponse(responseCode = "default", description = "List of leases", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LeaseDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/leases",
        produces = { "application/json" }
    )
    ResponseEntity<List<LeaseDTO>> getAllLeases(
        
    );


    /**
     * GET /leases/{leaseId} : Get lease by ID
     * 
     *
     * @param leaseId The ID needs to be fetched  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getLeaseById",
        summary = "Get lease by ID",
        description = "",
        tags = { "lease" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LeaseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/leases/{leaseId}",
        produces = { "application/json" }
    )
    ResponseEntity<LeaseDTO> getLeaseById(
        @Parameter(name = "leaseId", description = "The ID needs to be fetched ", required = true, in = ParameterIn.PATH) @PathVariable("leaseId") Long leaseId
    );


    /**
     * GET /leases/{ownerId} : Get lease by ownerId
     * 
     *
     * @param ownerId The ownerId needs to be fetched  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getLeaseByOwnerId",
        summary = "Get lease by ownerId",
        description = "",
        tags = { "lease" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LeaseDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/leases/{ownerId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<LeaseDTO>> getLeaseByOwnerId(
        @Parameter(name = "ownerId", description = "The ownerId needs to be fetched ", required = true, in = ParameterIn.PATH) @PathVariable("ownerId") Long ownerId
    );


    /**
     * GET /leases/{ownerId}/{tenantId} : Get lease by tenantId
     * 
     *
     * @param ownerId The ownerId needs to be fetched  (required)
     * @param tenantId The tenantId needs to be fetched  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getLeaseByOwnerIdAndTenantId",
        summary = "Get lease by tenantId",
        description = "",
        tags = { "lease" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LeaseDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/leases/{ownerId}/{tenantId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<LeaseDTO>> getLeaseByOwnerIdAndTenantId(
        @Parameter(name = "ownerId", description = "The ownerId needs to be fetched ", required = true, in = ParameterIn.PATH) @PathVariable("ownerId") Long ownerId,
        @Parameter(name = "tenantId", description = "The tenantId needs to be fetched ", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") Long tenantId
    );


    /**
     * GET /leases/{tenantId} : Get lease by tenantId
     * 
     *
     * @param tenantId The tenantId needs to be fetched  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getLeaseByTenantId",
        summary = "Get lease by tenantId",
        description = "",
        tags = { "lease" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = LeaseDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/leases/{tenantId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<LeaseDTO>> getLeaseByTenantId(
        @Parameter(name = "tenantId", description = "The tenantId needs to be fetched ", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") Long tenantId
    );


    /**
     * PUT /leases : update lease
     * 
     *
     * @param leaseDTO  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "updateLease",
        summary = "update lease",
        description = "",
        tags = { "lease" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LeaseDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/leases",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<LeaseDTO> updateLease(
        @Parameter(name = "LeaseDTO", description = "") @RequestBody(required = false) LeaseDTO leaseDTO
    );

}
