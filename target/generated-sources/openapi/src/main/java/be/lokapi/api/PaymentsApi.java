/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.lokapi.api;

import org.springframework.format.annotation.DateTimeFormat;
import java.time.LocalDate;
import be.lokapi.model.PaymentDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-14T03:02:17.381251+01:00[Europe/Brussels]")
@Controller
@Tag(name = "payments", description = "the payments API")
public interface PaymentsApi {

    /**
     * POST /payments : Record a new payment
     *
     * @param paymentDTO Created payment object (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "createPayment",
        summary = "Record a new payment",
        tags = { "payments" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<PaymentDTO> createPayment(
        @Parameter(name = "PaymentDTO", description = "Created payment object") @RequestBody(required = false) PaymentDTO paymentDTO
    );


    /**
     * DELETE /payments/{paymentId} : Delete payment
     * This can only be done by the logged in payment.
     *
     * @param paymentId The ID that needs to be deleted (required)
     * @return Invalid ID supplied (status code 400)
     *         or User not found (status code 404)
     */
    @Operation(
        operationId = "deletePayment",
        summary = "Delete payment",
        description = "This can only be done by the logged in payment.",
        tags = { "payment" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "User not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/payments/{paymentId}"
    )
    ResponseEntity<Void> deletePayment(
        @Parameter(name = "paymentId", description = "The ID that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") Long paymentId
    );


    /**
     * GET /payments/{paymentId} : Get user by user Id
     * 
     *
     * @param paymentId The id that needs to be fetched. Use user1 for testing.  (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Payment not found (status code 404)
     */
    @Operation(
        operationId = "getPaymentById",
        summary = "Get user by user Id",
        description = "",
        tags = { "payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Payment not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments/{paymentId}",
        produces = { "application/json" }
    )
    ResponseEntity<PaymentDTO> getPaymentById(
        @Parameter(name = "paymentId", description = "The id that needs to be fetched. Use user1 for testing. ", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") Long paymentId
    );


    /**
     * GET /payments : Get all Payments
     *
     * @return List of Payments received with success (status code 200)
     *         or Payments not found (status code 404)
     */
    @Operation(
        operationId = "getPayments",
        summary = "Get all Payments",
        tags = { "payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of Payments received with success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PaymentDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Payments not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments",
        produces = { "application/json" }
    )
    ResponseEntity<List<PaymentDTO>> getPayments(
        
    );


    /**
     * GET /payments/{date} : Get payments by date
     * 
     *
     * @param date The date needs to be fetched  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getPaymentsByDate",
        summary = "Get payments by date",
        description = "",
        tags = { "payments" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PaymentDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments/{date}",
        produces = { "application/json" }
    )
    ResponseEntity<List<PaymentDTO>> getPaymentsByDate(
        @Parameter(name = "date", description = "The date needs to be fetched ", required = true, in = ParameterIn.PATH) @PathVariable("date") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date
    );


    /**
     * GET /payments/{ownerId} : Get payments by tenants Id
     * 
     *
     * @param ownerId The ownerId needs to be fetched  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getPaymentsByOwnerId",
        summary = "Get payments by tenants Id",
        description = "",
        tags = { "payments" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PaymentDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments/{ownerId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<PaymentDTO>> getPaymentsByOwnerId(
        @Parameter(name = "ownerId", description = "The ownerId needs to be fetched ", required = true, in = ParameterIn.PATH) @PathVariable("ownerId") Long ownerId
    );


    /**
     * GET /payments/{tenantId} : Get payments by tenants Id
     * 
     *
     * @param tenantId The tenantId needs to be fetched  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getPaymentsByTenantId",
        summary = "Get payments by tenants Id",
        description = "",
        tags = { "payments" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PaymentDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments/{tenantId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<PaymentDTO>> getPaymentsByTenantId(
        @Parameter(name = "tenantId", description = "The tenantId needs to be fetched ", required = true, in = ParameterIn.PATH) @PathVariable("tenantId") Long tenantId
    );


    /**
     * PUT /payments/{paymentId} : Update payment
     * This can only be done by the logged in payment.
     *
     * @param paymentId ID that need to be updated (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "updatePayment",
        summary = "Update payment",
        description = "This can only be done by the logged in payment.",
        tags = { "payment" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/payments/{paymentId}"
    )
    ResponseEntity<Void> updatePayment(
        @Parameter(name = "paymentId", description = "ID that need to be updated", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") Long paymentId
    );

}
