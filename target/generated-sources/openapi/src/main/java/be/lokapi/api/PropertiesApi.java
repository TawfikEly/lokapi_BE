/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.lokapi.api;

import be.lokapi.model.GetAddressPropertyByOwnerIdDefaultResponseInnerDTO;
import be.lokapi.model.PropertyDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-14T03:02:17.381251+01:00[Europe/Brussels]")
@Controller
@Tag(name = "property", description = "operations about properties")
public interface PropertiesApi {

    /**
     * POST /properties : Create a new property
     * creation of a new property.
     *
     * @param propertyDTO  (required)
     * @return Property created successfully (status code 200)
     */
    @Operation(
        operationId = "createProperty",
        summary = "Create a new property",
        description = "creation of a new property.",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Property created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/properties",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<PropertyDTO> createProperty(
        @Parameter(name = "PropertyDTO", description = "", required = true) @RequestBody PropertyDTO propertyDTO
    );


    /**
     * DELETE /properties : Delete property by ID
     * delete property .
     *
     * @param propertyId The ID that needs to be deleted (required)
     * @return Invalid ID supplied (status code 400)
     *         or User not found (status code 404)
     *         or successful operation (status code 200)
     */
    @Operation(
        operationId = "deleteProperty",
        summary = "Delete property by ID",
        description = "delete property .",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/properties",
        produces = { "application/json" }
    )
    ResponseEntity<PropertyDTO> deleteProperty(
        @Parameter(name = "propertyId", description = "The ID that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("propertyId") Long propertyId
    );


    /**
     * GET /properties/{ownerId}/addresses : Get property addresses by owner ID
     *
     * @param ownerId  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getAddressPropertyByOwnerId",
        summary = "Get property addresses by owner ID",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetAddressPropertyByOwnerIdDefaultResponseInnerDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/properties/{ownerId}/addresses",
        produces = { "application/json" }
    )
    ResponseEntity<List<GetAddressPropertyByOwnerIdDefaultResponseInnerDTO>> getAddressPropertyByOwnerId(
        @Parameter(name = "ownerId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("ownerId") Long ownerId
    );


    /**
     * GET /properties : Get all properties
     *
     * @return List of properties (status code 200)
     */
    @Operation(
        operationId = "getAllProperties",
        summary = "Get all properties",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of properties", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PropertyDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/properties",
        produces = { "application/json" }
    )
    ResponseEntity<List<PropertyDTO>> getAllProperties(
        
    );


    /**
     * GET /properties/{propertyId} : Get property by property Id
     * 
     *
     * @param propertyId The id that needs to be fetched. Use property1 for testing.  (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Property not found (status code 404)
     */
    @Operation(
        operationId = "getPropertyById",
        summary = "Get property by property Id",
        description = "",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Property not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/properties/{propertyId}",
        produces = { "application/json" }
    )
    ResponseEntity<PropertyDTO> getPropertyById(
        @Parameter(name = "propertyId", description = "The id that needs to be fetched. Use property1 for testing. ", required = true, in = ParameterIn.PATH) @PathVariable("propertyId") Long propertyId
    );


    /**
     * GET /properties/{ownerId} : Get property by owner ID
     * 
     *
     * @param ownerId  (required)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "getPropertyByOwnerId",
        summary = "Get property by owner ID",
        description = "",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PropertyDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/properties/{ownerId}",
        produces = { "application/json" }
    )
    ResponseEntity<List<PropertyDTO>> getPropertyByOwnerId(
        @Parameter(name = "ownerId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("ownerId") Long ownerId
    );


    /**
     * GET /properties/{propertyId}/lease : Get property by property Id
     * 
     *
     * @param propertyId Details of property with lease attached   (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Property not found (status code 404)
     */
    @Operation(
        operationId = "getPropertyWithLeaseById",
        summary = "Get property by property Id",
        description = "",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Property not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/properties/{propertyId}/lease",
        produces = { "application/json" }
    )
    ResponseEntity<PropertyDTO> getPropertyWithLeaseById(
        @Parameter(name = "propertyId", description = "Details of property with lease attached  ", required = true, in = ParameterIn.PATH) @PathVariable("propertyId") Long propertyId
    );


    /**
     * PUT /properties : Update property
     * update property existing
     *
     * @param propertyId ID that need to be updated (required)
     * @return Invalid ID supplied (status code 400)
     *         or User not found (status code 404)
     *         or successful operation (status code 200)
     */
    @Operation(
        operationId = "updateProperty",
        summary = "Update property",
        description = "update property existing",
        tags = { "property" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "User not found"),
            @ApiResponse(responseCode = "default", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PropertyDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/properties",
        produces = { "application/json" }
    )
    ResponseEntity<PropertyDTO> updateProperty(
        @Parameter(name = "propertyId", description = "ID that need to be updated", required = true, in = ParameterIn.PATH) @PathVariable("propertyId") Long propertyId
    );

}
